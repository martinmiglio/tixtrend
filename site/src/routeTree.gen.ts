/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root'
import { Route as IndexRouteImport } from './app/index'
import { Route as SavedEventsIndexRouteImport } from './app/saved-events/index'
import { Route as AboutIndexRouteImport } from './app/about/index'
import { Route as EventEventidRouteImport } from './app/event/$eventid'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SavedEventsIndexRoute = SavedEventsIndexRouteImport.update({
  id: '/saved-events/',
  path: '/saved-events/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutIndexRoute = AboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventEventidRoute = EventEventidRouteImport.update({
  id: '/event/$eventid',
  path: '/event/$eventid',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/event/$eventid': typeof EventEventidRoute
  '/about': typeof AboutIndexRoute
  '/saved-events': typeof SavedEventsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/event/$eventid': typeof EventEventidRoute
  '/about': typeof AboutIndexRoute
  '/saved-events': typeof SavedEventsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/event/$eventid': typeof EventEventidRoute
  '/about/': typeof AboutIndexRoute
  '/saved-events/': typeof SavedEventsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/event/$eventid' | '/about' | '/saved-events'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/event/$eventid' | '/about' | '/saved-events'
  id: '__root__' | '/' | '/event/$eventid' | '/about/' | '/saved-events/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EventEventidRoute: typeof EventEventidRoute
  AboutIndexRoute: typeof AboutIndexRoute
  SavedEventsIndexRoute: typeof SavedEventsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/saved-events/': {
      id: '/saved-events/'
      path: '/saved-events'
      fullPath: '/saved-events'
      preLoaderRoute: typeof SavedEventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/event/$eventid': {
      id: '/event/$eventid'
      path: '/event/$eventid'
      fullPath: '/event/$eventid'
      preLoaderRoute: typeof EventEventidRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EventEventidRoute: EventEventidRoute,
  AboutIndexRoute: AboutIndexRoute,
  SavedEventsIndexRoute: SavedEventsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.ts'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
