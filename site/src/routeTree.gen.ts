/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/__root'
import { Route as IndexRouteImport } from './app/index'
import { Route as SavedEventsIndexRouteImport } from './app/saved-events/index'
import { Route as OgIndexRouteImport } from './app/og/index'
import { Route as AboutIndexRouteImport } from './app/about/index'
import { Route as EventEventidRouteImport } from './app/event/$eventid'
import { Route as ApiQueueWatchedEventsRouteImport } from './app/api/queue-watched-events'
import { Route as ApiPollEventRouteImport } from './app/api/poll-event'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SavedEventsIndexRoute = SavedEventsIndexRouteImport.update({
  id: '/saved-events/',
  path: '/saved-events/',
  getParentRoute: () => rootRouteImport,
} as any)
const OgIndexRoute = OgIndexRouteImport.update({
  id: '/og/',
  path: '/og/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutIndexRoute = AboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventEventidRoute = EventEventidRouteImport.update({
  id: '/event/$eventid',
  path: '/event/$eventid',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiQueueWatchedEventsRoute = ApiQueueWatchedEventsRouteImport.update({
  id: '/api/queue-watched-events',
  path: '/api/queue-watched-events',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiPollEventRoute = ApiPollEventRouteImport.update({
  id: '/api/poll-event',
  path: '/api/poll-event',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api/poll-event': typeof ApiPollEventRoute
  '/api/queue-watched-events': typeof ApiQueueWatchedEventsRoute
  '/event/$eventid': typeof EventEventidRoute
  '/about': typeof AboutIndexRoute
  '/og': typeof OgIndexRoute
  '/saved-events': typeof SavedEventsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api/poll-event': typeof ApiPollEventRoute
  '/api/queue-watched-events': typeof ApiQueueWatchedEventsRoute
  '/event/$eventid': typeof EventEventidRoute
  '/about': typeof AboutIndexRoute
  '/og': typeof OgIndexRoute
  '/saved-events': typeof SavedEventsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api/poll-event': typeof ApiPollEventRoute
  '/api/queue-watched-events': typeof ApiQueueWatchedEventsRoute
  '/event/$eventid': typeof EventEventidRoute
  '/about/': typeof AboutIndexRoute
  '/og/': typeof OgIndexRoute
  '/saved-events/': typeof SavedEventsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api/poll-event'
    | '/api/queue-watched-events'
    | '/event/$eventid'
    | '/about'
    | '/og'
    | '/saved-events'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api/poll-event'
    | '/api/queue-watched-events'
    | '/event/$eventid'
    | '/about'
    | '/og'
    | '/saved-events'
  id:
    | '__root__'
    | '/'
    | '/api/poll-event'
    | '/api/queue-watched-events'
    | '/event/$eventid'
    | '/about/'
    | '/og/'
    | '/saved-events/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiPollEventRoute: typeof ApiPollEventRoute
  ApiQueueWatchedEventsRoute: typeof ApiQueueWatchedEventsRoute
  EventEventidRoute: typeof EventEventidRoute
  AboutIndexRoute: typeof AboutIndexRoute
  OgIndexRoute: typeof OgIndexRoute
  SavedEventsIndexRoute: typeof SavedEventsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/saved-events/': {
      id: '/saved-events/'
      path: '/saved-events'
      fullPath: '/saved-events'
      preLoaderRoute: typeof SavedEventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/og/': {
      id: '/og/'
      path: '/og'
      fullPath: '/og'
      preLoaderRoute: typeof OgIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/event/$eventid': {
      id: '/event/$eventid'
      path: '/event/$eventid'
      fullPath: '/event/$eventid'
      preLoaderRoute: typeof EventEventidRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/queue-watched-events': {
      id: '/api/queue-watched-events'
      path: '/api/queue-watched-events'
      fullPath: '/api/queue-watched-events'
      preLoaderRoute: typeof ApiQueueWatchedEventsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/poll-event': {
      id: '/api/poll-event'
      path: '/api/poll-event'
      fullPath: '/api/poll-event'
      preLoaderRoute: typeof ApiPollEventRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiPollEventRoute: ApiPollEventRoute,
  ApiQueueWatchedEventsRoute: ApiQueueWatchedEventsRoute,
  EventEventidRoute: EventEventidRoute,
  AboutIndexRoute: AboutIndexRoute,
  OgIndexRoute: OgIndexRoute,
  SavedEventsIndexRoute: SavedEventsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.ts'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
